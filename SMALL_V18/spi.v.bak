//use SPI 3 mode,CHOL = 1,CHAL = 1
module spi(input clk,
              input rst_n,
              input CS_N,
              input SCK,
              input MOSI,
              input [7:0] txd_data,
              output reg MISO,
              output [31:0] rxd_data,
              output rxd_flag, 
				  output ledState);
//-------------------------capture the sck-----------------------------          
reg sck_r0,sck_r1;
wire sck_n,sck_p;
reg [31:0]rxd_data_temp;//temporarily store the data
//wire [31:0]rxd_data;
assign sck_n = (~sck_r0 & sck_r1)? 1'b1:1'b0;   //capture the sck negedge
assign sck_p = (~sck_r1 & sck_r0)? 1'b1:1'b0;   //capture the sck posedge

//-----------------------spi_slaver read data-------------------------------
reg rxd_flag_r;
reg [2:0] rxd_state;
always@(posedge clk or negedge rst_n)
begin
    if(!rst_n)
        begin
            rxd_data_temp[31:0] = 32'b0;
            rxd_flag_r = 1'b0;
            rxd_state = 1'b0;
        end
    else if(sck_p && !CS_N)   
        begin
            case(rxd_state)
                3'd0:begin
					         rxd_data_temp[31:0]=32'b0;
								
                        rxd_data_temp[7] = MOSI;
                        rxd_flag_r <= 1'b0;   //reset rxd_flag
                        rxd_state <= 3'd1;
                      end
                3'd1:begin
                        rxd_data_temp[6] <= MOSI;
                        rxd_state <= 3'd2;
                      end
                3'd2:begin
                        rxd_data_temp[5] <= MOSI;
                        rxd_state <= 3'd3;
                      end
                3'd3:begin
                        rxd_data_temp[4] <= MOSI;
                        rxd_state <= 3'd4;
                      end
                3'd4:begin
                        rxd_data_temp[3] <= MOSI;
                        rxd_state <= 3'd5;
                      end
                3'd5:begin
                        rxd_data_temp[2] <= MOSI;
                        rxd_state <= 3'd6;
                      end
                3'd6:begin
                        rxd_data_temp[1] <= MOSI;
                        rxd_state <= 3'd7;
                      end
                3'd7:begin
                        rxd_data_temp[0] <= MOSI;
                        rxd_flag_r <= 1'b1;  //set rxd_flag
                        rxd_state <= 3'd0;
                      end
                default: ;
            endcase
        end
end

assign rxd_data[31:0] = rxd_data_temp[31:0];
assign ledState = rxd_data[0];
endmodule